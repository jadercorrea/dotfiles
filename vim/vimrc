" PLUGIN MANAGER
" Install vim-plug if not found
if has("nvim") " neovim?
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
endif

autocmd VimEnter * PlugUpdate --sync | source $MYVIMRC

" CONFIGURATION
syntax on                         " Turn on syntax highlighting.

let g:python3_host_prog = '/opt/homebrew/bin/python3'

" options
set number                        " Show line numbers.
set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set backspace=indent,eol,start    " Intuitive backspacing.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set autoindent
set expandtab
set tabstop=2
set shiftwidth=2

"variables
let mapleader = ","

" all modes recursive mappings
map <Leader>s <ESC>:w<CR> 	  " Save by pressing ,s instead of :w
map <leader>t :tabnew<cr> 	  " New tab by pressing ,t

" normal mode recursive mappings
nmap <C-s> <ESC>:w<CR> 		  " Save by pressing ctrl+s
nmap <CR> :nohlsearch<CR>	  " Enter clears search highlight

" all modes non-recursive mappings
noremap <C-c> "*y 		  " Copy by pressing ctrl+c

" Resizing
nnoremap <C-h> :vertical resize +5<cr>
nnoremap <C-l> :vertical resize -5<cr>
nnoremap <C-k> :resize +5<cr>
nnoremap <C-j> :resize -5<cr>

" Misc
nnoremap <leader>ds vf"hd 	  " Delete remaining chars from a string

" PLUGINS
" loads the plugins listed in ~/.vim.plugins
call plug#begin('~/.vim/plugins')
source ~/.vim.plugins
call plug#end()

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Nerdtree
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle %<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Vim-ai
" complete text on the current line or in visual selection
map <C-q> :AIChat %<CR>

let g:vim_ai_chat = {}
let g:vim_ai_chat.options = {}
let g:vim_ai_chat.options.model = 'gpt-4-0125-preview'

" Tests
noremap <cr> <ESC>:w<ESC>\|:TestNearest<cr>
let g:test#javascript#runner = 'jest'

" Formaters
let g:mix_format_on_save = 1
map <leader>fe :MixFormat<cr>

" Functions
" rename current file
function! RenameFile()
  let old_name = expand('%')
  let old_directory = $PWD . "/" . fnamemodify(expand(old_name), ':h')
  let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
  let new_directory = fnamemodify(expand(new_name), ':h')

  if new_name != '' && new_name != old_name
    exec ':silent !mkdir -p ' . new_directory
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    exec ':silent !find ' . old_directory . ' -type d -empty -exec rmdir {} +'
    redraw!
  endif
endfunction

map <leader>m :call RenameFile()<cr>
